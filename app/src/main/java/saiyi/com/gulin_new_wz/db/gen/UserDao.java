package saiyi.com.gulin_new_wz.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import saiyi.com.gulin_new_wz.db.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Age = new Property(2, String.class, "age", false, "AGE");
        public final static Property Hight = new Property(3, String.class, "hight", false, "HIGHT");
        public final static Property Greader = new Property(4, String.class, "greader", false, "GREADER");
        public final static Property Weight = new Property(5, String.class, "weight", false, "WEIGHT");
        public final static Property Remarks = new Property(6, String.class, "remarks", false, "REMARKS");
        public final static Property Entering_person = new Property(7, String.class, "entering_person", false, "ENTERING_PERSON");
        public final static Property Doctors_name = new Property(8, String.class, "doctors_name", false, "DOCTORS_NAME");
        public final static Property UserHeader = new Property(9, String.class, "userHeader", false, "USER_HEADER");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"AGE\" TEXT," + // 2: age
                "\"HIGHT\" TEXT," + // 3: hight
                "\"GREADER\" TEXT," + // 4: greader
                "\"WEIGHT\" TEXT," + // 5: weight
                "\"REMARKS\" TEXT," + // 6: remarks
                "\"ENTERING_PERSON\" TEXT," + // 7: entering_person
                "\"DOCTORS_NAME\" TEXT," + // 8: doctors_name
                "\"USER_HEADER\" TEXT);"); // 9: userHeader
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String age = entity.getAge();
        if (age != null) {
            stmt.bindString(3, age);
        }
 
        String hight = entity.getHight();
        if (hight != null) {
            stmt.bindString(4, hight);
        }
 
        String greader = entity.getGreader();
        if (greader != null) {
            stmt.bindString(5, greader);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(6, weight);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(7, remarks);
        }
 
        String entering_person = entity.getEntering_person();
        if (entering_person != null) {
            stmt.bindString(8, entering_person);
        }
 
        String doctors_name = entity.getDoctors_name();
        if (doctors_name != null) {
            stmt.bindString(9, doctors_name);
        }
 
        String userHeader = entity.getUserHeader();
        if (userHeader != null) {
            stmt.bindString(10, userHeader);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String age = entity.getAge();
        if (age != null) {
            stmt.bindString(3, age);
        }
 
        String hight = entity.getHight();
        if (hight != null) {
            stmt.bindString(4, hight);
        }
 
        String greader = entity.getGreader();
        if (greader != null) {
            stmt.bindString(5, greader);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(6, weight);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(7, remarks);
        }
 
        String entering_person = entity.getEntering_person();
        if (entering_person != null) {
            stmt.bindString(8, entering_person);
        }
 
        String doctors_name = entity.getDoctors_name();
        if (doctors_name != null) {
            stmt.bindString(9, doctors_name);
        }
 
        String userHeader = entity.getUserHeader();
        if (userHeader != null) {
            stmt.bindString(10, userHeader);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // age
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // hight
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // greader
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // weight
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // remarks
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // entering_person
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // doctors_name
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // userHeader
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAge(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHight(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGreader(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setWeight(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRemarks(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEntering_person(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDoctors_name(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUserHeader(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
